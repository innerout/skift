name: Check

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Installing packages
      run: |
        sudo apt update
        sudo apt install -y nasm gcc make binutils grub-pc-bin qemu-system-x86
        sudo apt install -y build-essential bison flex libgmp3-dev libmpc-dev
        sudo apt install -y xorriso mtools inkscape libmpfr-dev texinfo libfuse-dev

    - name: Fetching submodules
      run: |
        git submodule update --init --recursive

    - name: Cache cross-toolchain
      uses: actions/cache@v2
      env:
        cache-name: cache-cross-toolchain
      with:
        path: |
          **/toolchain/local
        key: |
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/toolchain/build-it.sh', '**/toolchain/patches/gcc.patch', '**/toolchain/patches/binutils.patch') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/toolchain/build-it.sh', '**/toolchain/patches/gcc.patch', '**/toolchain/patches/binutils.patch') }}

    - name: Building cross-toolchain
      run: |
        toolchain/build-it.sh

    - name: Building skiftOS (x86_32)
      run: |
          make clean
          make all BUILD_ARCH=x86_32 BUILD_LOADER=limine

    - name: Building skiftOS (x86_64)
      run: |
          make clean
          make all BUILD_ARCH=x86_64 BUILD_LOADER=limine

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: disks
        path: disks/

  codestyle:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install packages
      run: |
        sudo apt install -y nasm gcc g++ gcc-multilib g++-multilib make binutils grub-pc-bin qemu-system-x86 clang-tidy
        sudo apt install -y build-essential bison flex libgmp3-dev libmpc-dev
        sudo apt install -y xorriso mtools inkscape libmpfr-dev texinfo libfuse-dev

    - id: files
      uses: jitterbit/get-changed-files@v1
    - run: |
        for changed_file in ${{ steps.files.outputs.all }}; do
          clang-tidy "${changed_file}" --checks="google-readability-braces-around-statements" --format-style=./.clang-format --warnings-as-errors="*"
        done
